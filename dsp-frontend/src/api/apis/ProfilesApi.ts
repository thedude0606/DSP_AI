/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Profiles
 * Profiles represent an advertiser and their account\'s marketplace, and are used in all subsequent API calls via a management scope, `Amazon-Advertising-API-Scope`. Reports and all entity management operations are associated with a single profile. Advertisers cannot have more than one profile for each marketplace.  Advertisers who operate in more than one marketplace (for example, Amazon.com, Amazon.co.uk, Amazon.co.jp) will have only one profile associated with each marketplace. [**See this link**](https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints) for a list of marketplaces associated with each endpoint.  To retrieve your profile IDs, call the listProfiles operation, and include a valid authorization access token in the header. Use a `profileId` from the returned list as the value for the management scope (`Amazon-Advertising-API-Scope`) in the headers for subsequent API calls.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Profile,
  ProfileResponse,
} from '../models/index';
import {
    ProfileFromJSON,
    ProfileToJSON,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
} from '../models/index';

export interface GetProfileByIdRequest {
    amazonAdvertisingAPIClientId: string;
    profileId: number;
}

export interface ListProfilesRequest {
    amazonAdvertisingAPIClientId: string;
    apiProgram?: ListProfilesApiProgramEnum;
    accessLevel?: ListProfilesAccessLevelEnum;
    profileTypeFilter?: ListProfilesProfileTypeFilterEnum;
    validPaymentMethodFilter?: ListProfilesValidPaymentMethodFilterEnum;
}

export interface UpdateProfilesRequest {
    amazonAdvertisingAPIClientId: string;
    profile?: Array<Profile>;
}

/**
 * 
 */
export class ProfilesApi extends runtime.BaseAPI {

    /**
     * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * Gets a profile specified by identifier.
     */
    async getProfileByIdRaw(requestParameters: GetProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters['amazonAdvertisingAPIClientId'] == null) {
            throw new runtime.RequiredError(
                'amazonAdvertisingAPIClientId',
                'Required parameter "amazonAdvertisingAPIClientId" was null or undefined when calling getProfileById().'
            );
        }

        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['amazonAdvertisingAPIClientId'] != null) {
            headerParameters['Amazon-Advertising-API-ClientId'] = String(requestParameters['amazonAdvertisingAPIClientId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2AuthorizationCode", ["cpc_advertising:campaign_management"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v2/profiles/{profileId}`;
        urlPath = urlPath.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * This operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * Gets a profile specified by identifier.
     */
    async getProfileById(requestParameters: GetProfileByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * Gets a list of profiles.
     */
    async listProfilesRaw(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Profile>>> {
        if (requestParameters['amazonAdvertisingAPIClientId'] == null) {
            throw new runtime.RequiredError(
                'amazonAdvertisingAPIClientId',
                'Required parameter "amazonAdvertisingAPIClientId" was null or undefined when calling listProfiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiProgram'] != null) {
            queryParameters['apiProgram'] = requestParameters['apiProgram'];
        }

        if (requestParameters['accessLevel'] != null) {
            queryParameters['accessLevel'] = requestParameters['accessLevel'];
        }

        if (requestParameters['profileTypeFilter'] != null) {
            queryParameters['profileTypeFilter'] = requestParameters['profileTypeFilter'];
        }

        if (requestParameters['validPaymentMethodFilter'] != null) {
            queryParameters['validPaymentMethodFilter'] = requestParameters['validPaymentMethodFilter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['amazonAdvertisingAPIClientId'] != null) {
            headerParameters['Amazon-Advertising-API-ClientId'] = String(requestParameters['amazonAdvertisingAPIClientId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2AuthorizationCode", ["cpc_advertising:campaign_management"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v2/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileFromJSON));
    }

    /**
     * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
     * Gets a list of profiles.
     */
    async listProfiles(requestParameters: ListProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Profile>> {
        const response = await this.listProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
     * Update the daily budget for one or more profiles.
     */
    async updateProfilesRaw(requestParameters: UpdateProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProfileResponse>>> {
        if (requestParameters['amazonAdvertisingAPIClientId'] == null) {
            throw new runtime.RequiredError(
                'amazonAdvertisingAPIClientId',
                'Required parameter "amazonAdvertisingAPIClientId" was null or undefined when calling updateProfiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['amazonAdvertisingAPIClientId'] != null) {
            headerParameters['Amazon-Advertising-API-ClientId'] = String(requestParameters['amazonAdvertisingAPIClientId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2AuthorizationCode", ["cpc_advertising:campaign_management"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v2/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['profile']!.map(ProfileToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileResponseFromJSON));
    }

    /**
     * Note that this operation is only used for Sellers using Sponsored Products. This operation is not enabled for vendor type accounts.
     * Update the daily budget for one or more profiles.
     */
    async updateProfiles(requestParameters: UpdateProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProfileResponse>> {
        const response = await this.updateProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListProfilesApiProgramEnum = {
    Billing: 'billing',
    Campaign: 'campaign',
    PaymentMethod: 'paymentMethod',
    Store: 'store',
    Report: 'report',
    Account: 'account',
    Posts: 'posts'
} as const;
export type ListProfilesApiProgramEnum = typeof ListProfilesApiProgramEnum[keyof typeof ListProfilesApiProgramEnum];
/**
 * @export
 */
export const ListProfilesAccessLevelEnum = {
    Edit: 'edit',
    View: 'view'
} as const;
export type ListProfilesAccessLevelEnum = typeof ListProfilesAccessLevelEnum[keyof typeof ListProfilesAccessLevelEnum];
/**
 * @export
 */
export const ListProfilesProfileTypeFilterEnum = {
    Seller: 'seller',
    Vendor: 'vendor',
    Agency: 'agency'
} as const;
export type ListProfilesProfileTypeFilterEnum = typeof ListProfilesProfileTypeFilterEnum[keyof typeof ListProfilesProfileTypeFilterEnum];
/**
 * @export
 */
export const ListProfilesValidPaymentMethodFilterEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ListProfilesValidPaymentMethodFilterEnum = typeof ListProfilesValidPaymentMethodFilterEnum[keyof typeof ListProfilesValidPaymentMethodFilterEnum];
