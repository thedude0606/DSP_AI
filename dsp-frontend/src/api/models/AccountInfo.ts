/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Profiles
 * Profiles represent an advertiser and their account\'s marketplace, and are used in all subsequent API calls via a management scope, `Amazon-Advertising-API-Scope`. Reports and all entity management operations are associated with a single profile. Advertisers cannot have more than one profile for each marketplace.  Advertisers who operate in more than one marketplace (for example, Amazon.com, Amazon.co.uk, Amazon.co.jp) will have only one profile associated with each marketplace. [**See this link**](https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints) for a list of marketplaces associated with each endpoint.  To retrieve your profile IDs, call the listProfiles operation, and include a valid authorization access token in the header. Use a `profileId` from the returned list as the value for the management scope (`Amazon-Advertising-API-Scope`) in the headers for subsequent API calls.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountType } from './AccountType';
import {
    AccountTypeFromJSON,
    AccountTypeFromJSONTyped,
    AccountTypeToJSON,
    AccountTypeToJSONTyped,
} from './AccountType';

/**
 * 
 * @export
 * @interface AccountInfo
 */
export interface AccountInfo {
    /**
     * The identifier of the marketplace to which the account is associated.
     * @type {string}
     * @memberof AccountInfo
     */
    readonly marketplaceStringId?: string;
    /**
     * Identifier for sellers and vendors. Note that this value is not unique and may be the same across marketplace.
     * @type {string}
     * @memberof AccountInfo
     */
    readonly id?: string;
    /**
     * 
     * @type {AccountType}
     * @memberof AccountInfo
     */
    type?: AccountType;
    /**
     * Account name.
     * @type {string}
     * @memberof AccountInfo
     */
    readonly name?: string;
    /**
     * The account subtype.
     * @type {string}
     * @memberof AccountInfo
     */
    readonly subType?: AccountInfoSubTypeEnum;
    /**
     * Only present for Vendors, this returns whether the Advertiser has set up a valid payment method or not.
     * @type {boolean}
     * @memberof AccountInfo
     */
    readonly validPaymentMethod?: boolean;
}


/**
 * @export
 */
export const AccountInfoSubTypeEnum = {
    KdpAuthor: 'KDP_AUTHOR',
    AmazonAttribution: 'AMAZON_ATTRIBUTION'
} as const;
export type AccountInfoSubTypeEnum = typeof AccountInfoSubTypeEnum[keyof typeof AccountInfoSubTypeEnum];


/**
 * Check if a given object implements the AccountInfo interface.
 */
export function instanceOfAccountInfo(value: object): value is AccountInfo {
    return true;
}

export function AccountInfoFromJSON(json: any): AccountInfo {
    return AccountInfoFromJSONTyped(json, false);
}

export function AccountInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'marketplaceStringId': json['marketplaceStringId'] == null ? undefined : json['marketplaceStringId'],
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : AccountTypeFromJSON(json['type']),
        'name': json['name'] == null ? undefined : json['name'],
        'subType': json['subType'] == null ? undefined : json['subType'],
        'validPaymentMethod': json['validPaymentMethod'] == null ? undefined : json['validPaymentMethod'],
    };
}

export function AccountInfoToJSON(json: any): AccountInfo {
    return AccountInfoToJSONTyped(json, false);
}

export function AccountInfoToJSONTyped(value?: Omit<AccountInfo, 'marketplaceStringId'|'id'|'name'|'subType'|'validPaymentMethod'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': AccountTypeToJSON(value['type']),
    };
}

