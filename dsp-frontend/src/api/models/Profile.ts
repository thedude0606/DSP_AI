/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Ads API - Profiles
 * Profiles represent an advertiser and their account\'s marketplace, and are used in all subsequent API calls via a management scope, `Amazon-Advertising-API-Scope`. Reports and all entity management operations are associated with a single profile. Advertisers cannot have more than one profile for each marketplace.  Advertisers who operate in more than one marketplace (for example, Amazon.com, Amazon.co.uk, Amazon.co.jp) will have only one profile associated with each marketplace. [**See this link**](https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints) for a list of marketplaces associated with each endpoint.  To retrieve your profile IDs, call the listProfiles operation, and include a valid authorization access token in the header. Use a `profileId` from the returned list as the value for the management scope (`Amazon-Advertising-API-Scope`) in the headers for subsequent API calls.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CountryCode } from './CountryCode';
import {
    CountryCodeFromJSON,
    CountryCodeFromJSONTyped,
    CountryCodeToJSON,
    CountryCodeToJSONTyped,
} from './CountryCode';
import type { AccountInfo } from './AccountInfo';
import {
    AccountInfoFromJSON,
    AccountInfoFromJSONTyped,
    AccountInfoToJSON,
    AccountInfoToJSONTyped,
} from './AccountInfo';

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {number}
     * @memberof Profile
     */
    profileId?: number;
    /**
     * 
     * @type {CountryCode}
     * @memberof Profile
     */
    countryCode?: CountryCode;
    /**
     * The currency used for all monetary values for entities under this profile.
     * |Region|`countryCode`|Country Name|`currencyCode`|
     * |-----|------|------|------|
     * |NA|BR|Brazil|BRL|
     * |NA|CA|Canada|CAD|
     * |NA|MX|Mexico|MXN|
     * |NA|US|United States|USD|
     * |EU|AE|United Arab Emirates|AED|
     * |EU|BE|Belgium|EUR|
     * |EU|DE|Germany|EUR|
     * |EU|EG|Egypt|EGP|
     * |EU|ES|Spain|EUR|
     * |EU|FR|France|EUR|
     * |EU|IE|Ireland|EUR|
     * |EU|IN|India|INR|
     * |EU|IT|Italy|EUR|
     * |EU|NL|The Netherlands|EUR|
     * |EU|PL|Poland|PLN|
     * |EU|SA|Saudi Arabia|SAR|
     * |EU|SE|Sweden|SEK|
     * |EU|TR|Turkey|TRY|
     * |EU|UK|United Kingdom|GBP|
     * |EU|ZA| South Africa | ZAR|
     * |FE|AU|Australia|AUD|
     * |FE|JP|Japan|JPY|
     * |FE|SG|Singapore|SGD|
     * @type {string}
     * @memberof Profile
     */
    readonly currencyCode?: ProfileCurrencyCodeEnum;
    /**
     * Note that this field applies to Sponsored Product campaigns for seller type accounts only. Not supported for vendor type accounts.
     * @type {number}
     * @memberof Profile
     */
    dailyBudget?: number;
    /**
     * The time zone used for all date-based campaign management and reporting.
     * |Region|`countryCode`|Country Name|`timezone`|
     * |------|-----|-----|------|
     * |NA|BR|Brazil|America/Sao_Paulo|
     * |NA|CA|Canada|America/Los_Angeles|
     * |NA|MX|Mexico|America/Los_Angeles|
     * |NA|US|United States|America/Los_Angeles|
     * |EU|AE|United Arab Emirates|Asia/Dubai|
     * |EU|BE|Belgium|Europe/Brussels|
     * |EU|DE|Germany|Europe/Paris|
     * |EU|EG|Egypt|Africa/Cairo|
     * |EU|ES|Spain|Europe/Paris|
     * |EU|FR|France|Europe/Paris|
     * |EU|IE|Ireland|Europe/Dublin|
     * |EU|IN|India|Asia/Kolkata|
     * |EU|IT|Italy|Europe/Paris|
     * |EU|NL|The Netherlands|Europe/Amsterdam|
     * |EU|PL|Poland|Europe/Warsaw|
     * |EU|SA|Saudi Arabia|Asia/Riyadh|
     * |EU|SE|Sweden|Europe/Stockholm|
     * |EU|TR|Turkey|Europe/Istanbul|
     * |EU|UK|United Kingdom|Europe/London|
     * |EU|ZA| South Africa | Africa/Johannesburg |
     * |FE|AU|Australia|Australia/Sydney|
     * |FE|JP|Japan|Asia/Tokyo|
     * |FE|SG|Singapore|Asia/Singapore|
     * @type {string}
     * @memberof Profile
     */
    readonly timezone?: ProfileTimezoneEnum;
    /**
     * 
     * @type {AccountInfo}
     * @memberof Profile
     */
    accountInfo?: AccountInfo;
}


/**
 * @export
 */
export const ProfileCurrencyCodeEnum = {
    Brl: 'BRL',
    Cad: 'CAD',
    Mxn: 'MXN',
    Usd: 'USD',
    Aed: 'AED',
    Eur: 'EUR',
    Egp: 'EGP',
    Inr: 'INR',
    Pln: 'PLN',
    Sar: 'SAR',
    Sek: 'SEK',
    Try: 'TRY',
    Gbp: 'GBP',
    Aud: 'AUD',
    Jpy: 'JPY',
    Sgd: 'SGD',
    Zar: 'ZAR'
} as const;
export type ProfileCurrencyCodeEnum = typeof ProfileCurrencyCodeEnum[keyof typeof ProfileCurrencyCodeEnum];

/**
 * @export
 */
export const ProfileTimezoneEnum = {
    AfricaCairo: 'Africa/Cairo',
    AmericaSaoPaulo: 'America/Sao_Paulo',
    AmericaLosAngeles: 'America/Los_Angeles',
    AsiaDubai: 'Asia/Dubai',
    AsiaKolkata: 'Asia/Kolkata',
    AsiaRiyadh: 'Asia/Riyadh',
    AsiaSingapore: 'Asia/Singapore',
    AsiaTokyo: 'Asia/Tokyo',
    AustraliaSydney: 'Australia/Sydney',
    EuropeAmsterdam: 'Europe/Amsterdam',
    EuropeDublin: 'Europe/Dublin',
    EuropeIstanbul: 'Europe/Istanbul',
    EuropeLondon: 'Europe/London',
    EuropeParis: 'Europe/Paris',
    EuropeStockholm: 'Europe/Stockholm',
    EuropeWarsaw: 'Europe/Warsaw',
    EuropeBrussels: 'Europe/Brussels',
    AfricaJohannesburg: 'Africa/Johannesburg'
} as const;
export type ProfileTimezoneEnum = typeof ProfileTimezoneEnum[keyof typeof ProfileTimezoneEnum];


/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): value is Profile {
    return true;
}

export function ProfileFromJSON(json: any): Profile {
    return ProfileFromJSONTyped(json, false);
}

export function ProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profile {
    if (json == null) {
        return json;
    }
    return {
        
        'profileId': json['profileId'] == null ? undefined : json['profileId'],
        'countryCode': json['countryCode'] == null ? undefined : CountryCodeFromJSON(json['countryCode']),
        'currencyCode': json['currencyCode'] == null ? undefined : json['currencyCode'],
        'dailyBudget': json['dailyBudget'] == null ? undefined : json['dailyBudget'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'accountInfo': json['accountInfo'] == null ? undefined : AccountInfoFromJSON(json['accountInfo']),
    };
}

export function ProfileToJSON(json: any): Profile {
    return ProfileToJSONTyped(json, false);
}

export function ProfileToJSONTyped(value?: Omit<Profile, 'currencyCode'|'timezone'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'profileId': value['profileId'],
        'countryCode': CountryCodeToJSON(value['countryCode']),
        'dailyBudget': value['dailyBudget'],
        'accountInfo': AccountInfoToJSON(value['accountInfo']),
    };
}

